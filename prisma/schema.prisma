// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(uuid())
  email String @unique 
  name String
  password String
  jobs JobApplication[]
  profile UserProfile?
  generatedResumes GeneratedResume[]
  createdAt DateTime @default(now())
}
model UserProfile {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  resumeText String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  jobMatchScore JobMatchScore[]
  contact    Contact?
  skills     Skill[]
  experience Experience[]
  education  Education[]
}

model Contact {
  id        String   @id @default(uuid())
  profileId String   @unique
  profile   UserProfile @relation(fields: [profileId], references: [id])
  name      String?
  email     String?
  phone     String?
  linkedin  String?
}

model Skill {
  id        String   @id @default(uuid())
  profileId String
  profile   UserProfile @relation(fields: [profileId], references: [id])
  name      String
}

model Experience {
  id          String   @id @default(uuid())
  profileId   String
  profile     UserProfile @relation(fields: [profileId], references: [id])
  company     String?
  role        String?
  startDate   String?
  endDate     String?
  achievements String[]
}

model Education {
  id          String   @id @default(uuid())
  profileId   String
  profile     UserProfile @relation(fields: [profileId], references: [id])
  degree      String?
  institution String?
  year        String?
}

model JobApplication {
  id String @id @default(uuid())
  company String
  position String
  source String?
  status Status @default(WISHLIST)
  appliedDate DateTime?
  deadline DateTime?
  contactName String?
  contactEmail String?
  salary Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId],references: [id])
  notes String? @db.Text()
  description String? @db.Text()
  jobMatchScore JobMatchScore[]
  generatedResume GeneratedResume[]
}
model JobMatchScore {
  id String @id @default(uuid())
  userProfile  UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId String
  jobApplication   JobApplication @relation(fields: [jobId], references: [id])
  jobId String
  fitScore     Float    
  explanation  Json

}
model GeneratedResume {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  jobId     String? 
  job       JobApplication? @relation(fields: [jobId], references: [id])
  fitScore  Float?
  content   Json     
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



enum Status {
  WISHLIST
  APPLIED
  INTERVIEW
  OFFER
  HIRED
  REJECTED
}